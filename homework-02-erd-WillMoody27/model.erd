// CS3810: Principles of Database Systems
// Instructor: Thyago Mota
// Student: William Hellems-Moody

/*
# TODO #1 (2 points)

Design an E/R model using crow's foot notation for a gym where customers (entity) are uniquely identified by email, having other attributes such as name, date of birth, weight and height. 

Every time a client enters or leaves the gym they need to swipe (verb) their personal card to release an access turnstile, which generates a record (entity) in the system.


My Breakdown
• crow's foot notation for a gym:
- Customer's attributes:
  - uniquely identified by email (Key) ✅
  - name ✅
  - date of birth ✅
  - weight ✅
  - height ✅

- Every time a client enters or leaves the gym they need to swipe (Verb) their personal card to release an access turnstile, which generates a record in the system.

- Critical Entities:
  - Customer ✅
  - Record (Didn't include attributes in instructions) ✅
  - Card (Didn't include attributes in instructions) ✅
*/

erdiagram hwk_02
notation=crowsfoot

// ✅
entity Customers {
    email key
    name
    date_of_birth
    weight
    height
}

entity Cards {
}

entity Records {
}

/*
 Relationships: 
  - A Customer has a Personal Card (1 to 1)
  - A Customer has 0 or more Records ([1] -> [0..1])
*/ 

relationship has {
    // Customer signs up and there will be a moment in time where the customer won't have a card until they finish the signup process.
  Customers[1] -> Cards[0..1] // 1 to 1
}

relationship generates {
    Cards[1] -> Records[0..N] // one to many

    /*
        Explanation: A card generate many records, but a record is generated by one and only one card. Cards[1] -> Records[N]
        
        CASE 1 ❌: A card can generate no records (new card), and a record can be generated by no card (doesnt make sense). Cards[1] -> Records[0..N] 

        CASE 2 ✅: A card generates at least one record (everytime a card is swiped, a record is generated), and a record is generated by one and only one card. Cards[1] -> Records[0..N]. NOTE: If they have not swiped their card, no record is generated of Records[0..N] is valid.
    */ 

}


/*
TODO-2: (3 points)

Design a E/R Model using crow's foot notation for a grade-keeping system described like the following:

Attributes:
- each student has a unique ID and name ✅
- a course has a number (unique) and a title ✅
- each assessment is identified by a number, a title and a type (quiz, homework, project, exam) ✅

- students enroll in courses 1 - M <==> [1] -> [0..N]
- students can enroll in multiple courses M - M <==> [0..N] -> [0..N]
- a course can have multiple students 1 - M <==> [1] -> [0..N]

End result is that:
Students[0..N] -> Courses[0..N]

- Critical Entities:
    - Students ✅
    - Courses ✅
    - Assignments ✅

- Scenario(s):
    - a course can have several assignments 1 to M <==> [1] -> [0..N]
    - each student receives a grade (0-10) for each assignment
*/

entity Students {
    id key
    name
}

entity Courses {
    number key
    title
}

entity Assignments {
    number key 
    title
    type // (quiz, homework, project, exam)
}

// STUDENTS ########################################
relationship enrolls {
/*
    Rel: Students can enroll in multiple courses (M-to-M) (🔥)
    Students can enroll in multiple courses -> A course can have either 0 or many students.

    Explanation: 
    CASE 1 ✅: Students can enroll in more than 1 course, and a course can have potentially many students enrolled. Students[N] -> Courses[N].

    CASE 2 ✅: A Student can enroll in no courses (semester off) -> A course can have no students (new course). Students[0..N] -> Courses[0..N]
*/
    Students[0..N] -> Courses[0..N] // Optional
}

// COURSES ########################################
relationship contains {
    /*
    Rel: A course can have several assignments (1-to-M) (🔥)

    Explanation:
    Assume that a course contains many assignments, and a assignment can only be associated with one course. Courses[1] -> Assignments[N]

    Determine if optional or mandatory:
    CASE 1 ✅: A course can have no assignments (new course with no assignments), and either none or many assignment can be associated with one and only one course. Courses[1] -> Assignments[0..N]

    CASE 2 ✅: A course must have at least one assignment (every course has at least one assignment), and each assignment is associated with one and only one course.

    CASE 3 ❌: A course can have no assignments (new course with no assignments), Many assignments cannot be associated with no course (doesnt make sense).

    CASE 4 ❌: A course must have exactly one assignment (every course has exactly one assignment), and each assignment is associated with one course. (Very restrictive and not practical for real world use cases.)

    */
    Courses[1] -> Assignments[0..N]
}


relationship receives {
    /*
     Rel: each student receives a grade (0-10) for each assignment.

    Explanation:
    Each student receives a grade for each assignment. Students[N] -> Assignments[N | "Graded 0 - 10" ]

    Determine if optional or mandatory:
    CASE 1 ❌: A student can have no assignments that are graded (new student or joined class late), but many assignment cannot be associated with no students (doesnt make sense).

    CASE 2 ✅: A student can have no assignments that are graded (new student or joined class late), and many assignment can be associated with one and only 1 student. Students[1] -> Assignments[0..N]
    */

    Students[1] -> Assignments[0..N | "Grades 0 - 10" ]
    grade
}



/*
To get full credit on this assignment, make sure the entities are named according to the convention discussed in class, key attributes are identified, relationships are described using the correct type and cardinality.
*/